/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={669:(t,e,n)=>{t.exports=n(609)},448:(t,e,n)=>{"use strict";var r=n(702),o=n(867),i=n(26),s=n(372),a=n(327),c=n(97),u=n(109),l=n(985),h=n(61);t.exports=function(t){return new r((function(e,n){var r=t.data,d=t.headers;o.isFormData(r)&&delete d["Content-Type"];var f=new XMLHttpRequest;if(t.auth){var p=t.auth.username||"",m=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";d.Authorization="Basic "+btoa(p+":"+m)}var v=c(t.baseURL,t.url);if(f.open(t.method.toUpperCase(),a(v,t.params,t.paramsSerializer),!0),f.timeout=t.timeout,f.onreadystatechange=function(){if(f&&4===f.readyState&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in f?u(f.getAllResponseHeaders()):null,o={data:t.responseType&&"text"!==t.responseType?f.response:f.responseText,status:f.status,statusText:f.statusText,headers:r,config:t,request:f};i(e,n,o),f=null}},f.onabort=function(){f&&(n(h("Request aborted",t,"ECONNABORTED",f)),f=null)},f.onerror=function(){n(h("Network Error",t,null,f)),f=null},f.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),n(h(e,t,"ECONNABORTED",f)),f=null},o.isStandardBrowserEnv()){var g=(t.withCredentials||l(v))&&t.xsrfCookieName?s.read(t.xsrfCookieName):void 0;g&&(d[t.xsrfHeaderName]=g)}if("setRequestHeader"in f&&o.forEach(d,(function(t,e){void 0===r&&"content-type"===e.toLowerCase()?delete d[e]:f.setRequestHeader(e,t)})),o.isUndefined(t.withCredentials)||(f.withCredentials=!!t.withCredentials),t.responseType)try{f.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&f.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){f&&(f.abort(),n(t),f=null)})),r||(r=null),f.send(r)}))}},609:(t,e,n)=>{"use strict";var r=n(702),o=n(867),i=n(849),s=n(321),a=n(185);function c(t){var e=new s(t),n=i(s.prototype.request,e);return o.extend(n,s.prototype,e),o.extend(n,e),n}var u=c(n(655));u.Axios=s,u.create=function(t){return c(a(u.defaults,t))},u.Cancel=n(263),u.CancelToken=n(972),u.isCancel=n(502),u.all=function(t){return r.all(t)},u.spread=n(713),u.isAxiosError=n(268),t.exports=u,t.exports.default=u},263:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},972:(t,e,n)=>{"use strict";var r=n(702),o=n(263);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new r((function(t){e=t}));var n=this;t((function(t){n.reason||(n.reason=new o(t),e(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i((function(e){t=e})),cancel:t}},t.exports=i},502:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},321:(t,e,n)=>{"use strict";var r=n(702),o=n(867),i=n(327),s=n(782),a=n(572),c=n(185);function u(t){this.defaults=t,this.interceptors={request:new s,response:new s}}u.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=c(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[a,void 0],n=r.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)n=n.then(e.shift(),e.shift());return n},u.prototype.getUri=function(t){return t=c(this.defaults,t),i(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},o.forEach(["delete","get","head","options"],(function(t){u.prototype[t]=function(e,n){return this.request(c(n||{},{method:t,url:e,data:(n||{}).data}))}})),o.forEach(["post","put","patch"],(function(t){u.prototype[t]=function(e,n,r){return this.request(c(r||{},{method:t,url:e,data:n}))}})),t.exports=u},782:(t,e,n)=>{"use strict";var r=n(867);function o(){this.handlers=[]}o.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=o},97:(t,e,n)=>{"use strict";var r=n(793),o=n(303);t.exports=function(t,e){return t&&!r(e)?o(t,e):e}},61:(t,e,n)=>{"use strict";var r=n(481);t.exports=function(t,e,n,o,i){var s=new Error(t);return r(s,e,n,o,i)}},572:(t,e,n)=>{"use strict";var r=n(702),o=n(867),i=n(527),s=n(502),a=n(655);function c(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return c(t),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=o.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),o.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||a.adapter)(t).then((function(e){return c(t),e.data=i(e.data,e.headers,t.transformResponse),e}),(function(e){return s(e)||(c(t),e&&e.response&&(e.response.data=i(e.response.data,e.response.headers,t.transformResponse))),r.reject(e)}))}},481:t=>{"use strict";t.exports=function(t,e,n,r,o){return t.config=e,n&&(t.code=n),t.request=r,t.response=o,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},185:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e){e=e||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],s=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function c(t,e){return r.isPlainObject(t)&&r.isPlainObject(e)?r.merge(t,e):r.isPlainObject(e)?r.merge({},e):r.isArray(e)?e.slice():e}function u(o){r.isUndefined(e[o])?r.isUndefined(t[o])||(n[o]=c(void 0,t[o])):n[o]=c(t[o],e[o])}r.forEach(o,(function(t){r.isUndefined(e[t])||(n[t]=c(void 0,e[t]))})),r.forEach(i,u),r.forEach(s,(function(o){r.isUndefined(e[o])?r.isUndefined(t[o])||(n[o]=c(void 0,t[o])):n[o]=c(void 0,e[o])})),r.forEach(a,(function(r){r in e?n[r]=c(t[r],e[r]):r in t&&(n[r]=c(void 0,t[r]))}));var l=o.concat(i).concat(s).concat(a),h=Object.keys(t).concat(Object.keys(e)).filter((function(t){return-1===l.indexOf(t)}));return r.forEach(h,u),n}},26:(t,e,n)=>{"use strict";var r=n(61);t.exports=function(t,e,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},527:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e,n){return r.forEach(n,(function(n){t=n(t,e)})),t}},655:(t,e,n)=>{"use strict";var r=n(867),o=n(16),i={"Content-Type":"application/x-www-form-urlencoded"};function s(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a,c={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(a=n(448)),a),transformRequest:[function(t,e){return o(e,"Accept"),o(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(s(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(s(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(t){c.headers[t]={}})),r.forEach(["post","put","patch"],(function(t){c.headers[t]=r.merge(i)})),t.exports=c},849:t=>{"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},327:(t,e,n)=>{"use strict";var r=n(867);function o(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var i;if(n)i=n(e);else if(r.isURLSearchParams(e))i=e.toString();else{var s=[];r.forEach(e,(function(t,e){null!=t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,(function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),s.push(o(e)+"="+o(t))})))})),i=s.join("&")}if(i){var a=t.indexOf("#");-1!==a&&(t=t.slice(0,a)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}},303:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},372:(t,e,n)=>{"use strict";var r=n(867);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,o,i,s){var a=[];a.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},268:t=>{"use strict";t.exports=function(t){return"object"==typeof t&&!0===t.isAxiosError}},985:(t,e,n)=>{"use strict";var r=n(867);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=o(window.location.href),function(e){var n=r.isString(e)?o(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},16:(t,e,n)=>{"use strict";var r=n(867);t.exports=function(t,e){r.forEach(t,(function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])}))}},109:(t,e,n)=>{"use strict";var r=n(867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,i,s={};return t?(r.forEach(t.split("\n"),(function(t){if(i=t.indexOf(":"),e=r.trim(t.substr(0,i)).toLowerCase(),n=r.trim(t.substr(i+1)),e){if(s[e]&&o.indexOf(e)>=0)return;s[e]="set-cookie"===e?(s[e]?s[e]:[]).concat([n]):s[e]?s[e]+", "+n:n}})),s):s}},713:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},867:(t,e,n)=>{"use strict";var r=n(849),o=Object.prototype.toString;function i(t){return"[object Array]"===o.call(t)}function s(t){return void 0===t}function a(t){return null!==t&&"object"==typeof t}function c(t){if("[object Object]"!==o.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function u(t){return"[object Function]"===o.call(t)}function l(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),i(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:i,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:function(t){return null!==t&&!s(t)&&null!==t.constructor&&!s(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:a,isPlainObject:c,isUndefined:s,isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:u,isStream:function(t){return a(t)&&u(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function t(){var e={};function n(n,r){c(e[r])&&c(n)?e[r]=t(e[r],n):c(n)?e[r]=t({},n):i(n)?e[r]=n.slice():e[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return e},extend:function(t,e,n){return l(e,(function(e,o){t[o]=n&&"function"==typeof e?r(e,n):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},170:(t,e,n)=>{(e=n(645)(!1)).push([t.id,'.mapboxgl-valhalla-list\n{\n    display: none;\n}\n\n.mapboxgl-ctrl-group .mapboxgl-valhalla-list button\n{\n    background: none;\n    border: none;\n    cursor: pointer;\n    display: block;\n    font-size: 14px;\n    padding: 8px 8px 6px;\n    text-align: right;\n    width: 100%;\n    height: auto;\n}\n\n.mapboxgl-valhalla-list button.active\n{\n    font-weight: bold;\n}\n\n.mapboxgl-valhalla-list button:hover\n{\n    background-color: rgba(0, 0, 0, 0.05);\n}\n\n.mapboxgl-valhalla-list button + button\n{\n    border-top: 1px solid #ddd;\n}\n\n.mapboxgl-valhalla-control\n{ \n    background: url(\'data:image/svg+xml;charset=UTF-8,<svg id="Capa_1" enable-background="new 0 0 512 512" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg"><g><path d="M487.663,282.767c-32.447-32.447-85.054-32.447-117.501,0c-26.833,26.833-32.076,68.438-12.738,101.089l53.549,90.417 H105.657c-26.329,0-47.749-21.421-47.749-47.75c0-26.329,21.42-47.749,47.749-47.749h143.589 c42.871,0,77.749-34.878,77.749-77.749c0-42.871-34.878-77.749-77.749-77.749H101.027l53.549-90.416 c19.338-32.651,14.095-74.256-12.738-101.089c-32.447-32.447-85.054-32.447-117.501,0C-2.496,58.603-7.739,100.208,11.599,132.859 l71.489,120.708l0.172-0.291h165.986c26.329,0,47.749,21.42,47.749,47.749c0,26.329-21.42,47.749-47.749,47.749H105.657 c-42.871,0-77.749,34.878-77.749,77.749c0,42.871,34.878,77.75,77.749,77.75H428.74l0.172,0.291l71.489-120.707 C519.739,351.205,514.496,309.6,487.663,282.767z M83.087,116.713c-14.442,0-26.191-11.749-26.191-26.191 c0-14.442,11.749-26.191,26.191-26.191c14.442,0,26.191,11.749,26.191,26.191C109.278,104.964,97.529,116.713,83.087,116.713z M427.79,367.71c-14.442,0-26.191-11.749-26.191-26.191c0-14.442,11.749-26.191,26.191-26.191 c14.442,0,26.191,11.749,26.191,26.191S442.232,367.71,427.79,367.71z"/></g></svg>\');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 70%;\n}\n',""]),t.exports=e},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n,r,o,i=t[1]||"",s=t[3];if(!s)return i;if(e&&"function"==typeof btoa){var a=(n=s,r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),"/*# ".concat(o," */")),c=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[i].concat(c).concat([a]).join("\n")}return[i].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},702:function(t,e,n){t.exports=function(){"use strict";function t(t){return"function"==typeof t}var e=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},r=0,o=void 0,i=void 0,s=function(t,e){f[r]=t,f[r+1]=e,2===(r+=2)&&(i?i(p):b())};var a="undefined"!=typeof window?window:void 0,c=a||{},u=c.MutationObserver||c.WebKitMutationObserver,l="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),h="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function d(){var t=setTimeout;return function(){return t(p,1)}}var f=new Array(1e3);function p(){for(var t=0;t<r;t+=2)(0,f[t])(f[t+1]),f[t]=void 0,f[t+1]=void 0;r=0}var m,v,g,y,b=void 0;function x(t,e){var n=this,r=new this.constructor(E);void 0===r[w]&&B(r);var o=n._state;if(o){var i=arguments[o-1];s((function(){return N(o,r,i,n._result)}))}else k(n,r,t,e);return r}function C(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(E);return L(e,t),e}b=l?function(){return process.nextTick(p)}:u?(v=0,g=new u(p),y=document.createTextNode(""),g.observe(y,{characterData:!0}),function(){y.data=v=++v%2}):h?((m=new MessageChannel).port1.onmessage=p,function(){return m.port2.postMessage(0)}):void 0===a?function(){try{var t=Function("return this")().require("vertx");return void 0!==(o=t.runOnLoop||t.runOnContext)?function(){o(p)}:d()}catch(t){return d()}}():d();var w=Math.random().toString(36).substring(2);function E(){}var A=void 0;function _(e,n,r){n.constructor===e.constructor&&r===x&&n.constructor.resolve===C?function(t,e){1===e._state?j(t,e._result):2===e._state?T(t,e._result):k(e,void 0,(function(e){return L(t,e)}),(function(e){return T(t,e)}))}(e,n):void 0===r?j(e,n):t(r)?function(t,e,n){s((function(t){var r=!1,o=function(t,e,n,r){try{t.call(e,n,r)}catch(t){return t}}(n,e,(function(n){r||(r=!0,e!==n?L(t,n):j(t,n))}),(function(e){r||(r=!0,T(t,e))}),t._label);!r&&o&&(r=!0,T(t,o))}),t)}(e,n,r):j(e,n)}function L(t,e){if(t===e)T(t,new TypeError("You cannot resolve a promise with itself"));else if(o=typeof(r=e),null===r||"object"!==o&&"function"!==o)j(t,e);else{var n=void 0;try{n=e.then}catch(e){return void T(t,e)}_(t,e,n)}var r,o}function S(t){t._onerror&&t._onerror(t._result),O(t)}function j(t,e){t._state===A&&(t._result=e,t._state=1,0!==t._subscribers.length&&s(O,t))}function T(t,e){t._state===A&&(t._state=2,t._result=e,s(S,t))}function k(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+1]=n,o[i+2]=r,0===i&&t._state&&s(O,t)}function O(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?N(n,r,o,i):o(i);t._subscribers.length=0}}function N(e,n,r,o){var i=t(r),s=void 0,a=void 0,c=!0;if(i){try{s=r(o)}catch(t){c=!1,a=t}if(n===s)return void T(n,new TypeError("A promises callback cannot return that same promise."))}else s=o;n._state!==A||(i&&c?L(n,s):!1===c?T(n,a):1===e?j(n,s):2===e&&T(n,s))}var R=0;function B(t){t[w]=R++,t._state=void 0,t._result=void 0,t._subscribers=[]}var M=function(){function t(t,n){this._instanceConstructor=t,this.promise=new t(E),this.promise[w]||B(this.promise),e(n)?(this.length=n.length,this._remaining=n.length,this._result=new Array(this.length),0===this.length?j(this.promise,this._result):(this.length=this.length||0,this._enumerate(n),0===this._remaining&&j(this.promise,this._result))):T(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var e=0;this._state===A&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===C){var o=void 0,i=void 0,s=!1;try{o=t.then}catch(t){s=!0,i=t}if(o===x&&t._state!==A)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(n===U){var a=new n(E);s?T(a,i):_(a,t,o),this._willSettleAt(a,e)}else this._willSettleAt(new n((function(e){return e(t)})),e)}else this._willSettleAt(r(t),e)},t.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===A&&(this._remaining--,2===t?T(r,n):this._result[e]=n),0===this._remaining&&j(r,this._result)},t.prototype._willSettleAt=function(t,e){var n=this;k(t,void 0,(function(t){return n._settledAt(1,e,t)}),(function(t){return n._settledAt(2,e,t)}))},t}();var U=function(){function e(t){this[w]=R++,this._result=this._state=void 0,this._subscribers=[],E!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof e?function(t,e){try{e((function(e){L(t,e)}),(function(e){T(t,e)}))}catch(e){T(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return e.prototype.catch=function(t){return this.then(null,t)},e.prototype.finally=function(e){var n=this,r=n.constructor;return t(e)?n.then((function(t){return r.resolve(e()).then((function(){return t}))}),(function(t){return r.resolve(e()).then((function(){throw t}))})):n.then(e,e)},e}();return U.prototype.then=x,U.all=function(t){return new M(this,t).promise},U.race=function(t){var n=this;return e(t)?new n((function(e,r){for(var o=t.length,i=0;i<o;i++)n.resolve(t[i]).then(e,r)})):new n((function(t,e){return e(new TypeError("You must pass an array to race."))}))},U.resolve=C,U.reject=function(t){var e=new this(E);return T(e,t),e},U._setScheduler=function(t){i=t},U._setAsap=function(t){s=t},U._asap=s,U.polyfill=function(){var t=void 0;if(void 0!==n.g)t=n.g;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=U},U.Promise=U,U}()},735:(t,e,n)=>{var r=n(379),o=n(170);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.id,o,""]]);r(o,{insert:"head",singleton:!1}),t.exports=o.locals||{}},379:(t,e,n)=>{"use strict";var r,o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function s(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},r=[],o=0;o<t.length;o++){var a=t[o],c=e.base?a[0]+e.base:a[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var h=s(l),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==h?(i[h].references++,i[h].updater(d)):i.push({identifier:l,updater:m(d,e),references:1}),r.push(l)}return r}function c(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var u,l=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join("\n")});function h(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function d(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var f=null,p=0;function m(t,e){var n,r,o;if(e.singleton){var i=p++;n=f||(f=c(e)),r=h.bind(null,n,i,!1),o=h.bind(null,n,i,!0)}else n=c(e),r=d.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=s(n[r]);i[o].references--}for(var c=a(t,e),u=0;u<n.length;u++){var l=s(n[u]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=c}}}},722:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.color="#535353",this.map=t}create(){this.updateValues(),void 0!==this.map?(this.map.on("resize",this.mapResize.bind(this)),this.createCanvas(this.map.getCanvasContainer())):console.error("map object is null")}updateValues(){var t,e;this.width=null===(t=this.map)||void 0===t?void 0:t.getCanvas().clientWidth,this.height=null===(e=this.map)||void 0===e?void 0:e.getCanvas().clientHeight}mapResize(){this.updateValues(),this.updateCanvas()}updateCanvas(){if(void 0!==this.svgCanvas&&void 0!==this.yLine&&void 0!==this.xLine&&void 0!==this.width&&void 0!==this.height){this.svgCanvas.setAttribute("width",`${this.width}px`),this.svgCanvas.setAttribute("height",`${this.height}px`);const t=this.width/2,e=this.height/2;this.yLine.setAttribute("x1",`${t}px`),this.yLine.setAttribute("y1","0px"),this.yLine.setAttribute("x2",`${t}px`),this.yLine.setAttribute("y2",`${this.height}px`),this.xLine.setAttribute("x1","0px"),this.xLine.setAttribute("y1",`${e}px`),this.xLine.setAttribute("x2",`${this.width}px`),this.xLine.setAttribute("y2",`${e}px`)}else console.error("element value is null")}createCanvas(t){if(void 0!==this.width&&void 0!==this.height){const e=document.createElementNS("http://www.w3.org/2000/svg","svg");e.style.position="relative",e.setAttribute("width",`${this.width}px`),e.setAttribute("height",`${this.height}px`);const n=this.width/2,r=this.height/2;this.yLine=e.appendChild(this.createLine(n,0,n,this.height,this.color,"2px")),this.xLine=e.appendChild(this.createLine(0,r,this.width,r,this.color,"2px")),null==t||t.appendChild(e),this.svgCanvas=e}}createLine(t,e,n,r,o,i){const s=document.createElementNS("http://www.w3.org/2000/svg","line");return s.setAttribute("x1",t),s.setAttribute("y1",e),s.setAttribute("x2",n),s.setAttribute("y2",r),s.setAttribute("stroke-dasharray","5,5"),s.setAttribute("stroke",o),s.setAttribute("stroke-width",i),s}destroy(){void 0!==this.xLine&&(this.xLine.remove(),this.xLine=void 0),void 0!==this.yLine&&(this.yLine.remove(),this.yLine=void 0),void 0!==this.svgCanvas&&(this.svgCanvas.remove(),this.svgCanvas=void 0),void 0!==this.map&&(this.map.off("resize",this.mapResize),this.map=void 0)}}},620:(t,e,n)=>{"use strict";e.n=void 0;var r=n(980);Object.defineProperty(e,"n",{enumerable:!0,get:function(){return r.default}})},980:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(722),o=n(824);e.default=class{constructor(t,e){this.options={Contours:[{time:5,color:"ff0000"},{time:10,color:"ffff00"},{time:15,color:"0000ff"}],Crosshair:!0},this.url=t,e&&(this.options=Object.assign(this.options,e)),this.onDocumentClick=this.onDocumentClick.bind(this)}getDefaultPosition(){return"top-right"}onAdd(t){var e,n;this.map=t,this.controlContainer=document.createElement("div"),this.controlContainer.classList.add("mapboxgl-ctrl"),this.controlContainer.classList.add("mapboxgl-ctrl-group"),this.mainContainer=document.createElement("div"),this.mainContainer.classList.add("mapboxgl-valhalla-list"),this.mainButton=document.createElement("button"),this.mainButton.classList.add("mapboxgl-ctrl-icon"),this.mainButton.classList.add("mapboxgl-valhalla-control"),this.mainButton.addEventListener("click",(()=>{this.mainButton.style.display="none",this.mainContainer.style.display="block",this.toggleCrosshair(!0)})),document.addEventListener("click",this.onDocumentClick),this.controlContainer.appendChild(this.mainButton),this.controlContainer.appendChild(this.mainContainer);const r=document.createElement("TABLE");r.className="valhalla-table",this.mainContainer.appendChild(r);const i=this.createSelection(o.Costing,"Means of transport","costing",o.Costing.Walking,((t,e)=>t[e]));r.appendChild(i);const s=null===(e=this.map)||void 0===e?void 0:e.getCenter(),a=this.createTextbox("Longitude","lon",s.lng,!0);r.appendChild(a);const c=this.createTextbox("Latitude","lat",s.lat,!0);r.appendChild(c),this.map&&(this.valhalla=new o.default(this.map,this.url,this.options.Contours));const u=document.createElement("button");return u.textContent="Calculate",u.classList.add("calc-button"),u.addEventListener("click",(()=>{const t=document.getElementById("mapbox-gl-valhalla-lon"),e=document.getElementById("mapbox-gl-valhalla-lat"),n=document.getElementById("mapbox-gl-valhalla-costing");this.valhalla.getIsochrone(Number(t.value),Number(e.value),n.value,o.ContourType.Time)})),this.mainContainer.appendChild(u),null===(n=this.map)||void 0===n||n.on("moveend",(()=>{var t;const e=null===(t=this.map)||void 0===t?void 0:t.getCenter(),n=document.getElementById("mapbox-gl-valhalla-lon"),r=document.getElementById("mapbox-gl-valhalla-lat");e||(n.setAttribute("value",""),r.setAttribute("value",""));const o=e,i=(null==o?void 0:o.lng)?o.lng.toString():"";n.setAttribute("value",i);const s=(null==o?void 0:o.lat)?o.lat.toString():"";r.setAttribute("value",s)})),this.controlContainer}onRemove(){this.controlContainer&&this.controlContainer.parentNode&&this.map&&this.mainButton&&(this.mainButton.removeEventListener("click",this.onDocumentClick),this.controlContainer.parentNode.removeChild(this.controlContainer),document.removeEventListener("click",this.onDocumentClick),void 0!==this.crosshair&&(this.crosshair.destroy(),this.crosshair=void 0),this.map=void 0)}onDocumentClick(t){this.controlContainer&&!this.controlContainer.contains(t.target)&&this.mainContainer&&this.mainButton&&(this.mainContainer.style.display="none",this.mainButton.style.display="block",this.toggleCrosshair(!1))}createSelection(t,e,n,r,o){const i=document.createElement("label");i.textContent=e;const s=document.createElement("select");s.setAttribute("id",`mapbox-gl-valhalla-${n}`),s.style.width="100%",Object.keys(t).forEach((e=>{const i=document.createElement("option");i.setAttribute("value",o(t,e)),i.appendChild(document.createTextNode(e)),i.setAttribute("name",n),r===t[e]&&(i.selected=!0),s.appendChild(i)}));const a=document.createElement("TR"),c=document.createElement("TD"),u=document.createElement("TD");return c.appendChild(i),u.appendChild(s),a.appendChild(c),a.appendChild(u),a}createTextbox(t,e,n,r){const o=document.createElement("label");o.textContent=t;const i=document.createElement("input");i.setAttribute("id",`mapbox-gl-valhalla-${e}`),i.setAttribute("type","text"),i.setAttribute("value",n),i.readOnly=r;const s=document.createElement("TR"),a=document.createElement("TD"),c=document.createElement("TD");return a.appendChild(o),c.appendChild(i),s.appendChild(a),s.appendChild(c),s}toggleCrosshair(t){!0===this.options.Crosshair&&(!1===t?void 0!==this.crosshair&&(this.crosshair.destroy(),this.crosshair=void 0):(this.crosshair=new r.default(this.map),this.crosshair.create()))}}},824:(t,e,n)=>{"use strict";var r=n(702);Object.defineProperty(e,"__esModule",{value:!0}),e.ContourType=e.Costing=void 0;const o=n(669),i=n(507);e.Costing={Walking:"pedestrian",Bicycle:"bicycle",Car:"auto"},e.ContourType={Time:"time",Distance:"distance"},e.default=class{constructor(t,e,n){this.contourSources=[],this.contourLayers=[],this.contourMaker=void 0,this.contours=[{time:5,color:"ff0000"},{time:10,color:"ffff00"},{time:15,color:"0000ff"}],this.map=t,this.url=e,n&&(this.contours=n)}getIsochrone(t,n,s,a){this.contourLayers.length>0&&(this.contourLayers.forEach((t=>{var e;null===(e=this.map)||void 0===e||e.removeLayer(t)})),this.contourLayers=[]),this.contourSources.length>0&&(this.contourSources.forEach((t=>{var e;null===(e=this.map)||void 0===e||e.removeSource(t)})),this.contourSources=[]),this.contourMaker&&(this.contourMaker.remove(),this.contourMaker=void 0);const c=JSON.parse(JSON.stringify(this.contours));c.forEach((t=>{a===e.ContourType.Time?delete t.distance:delete t.time}));let u="km";return a===e.ContourType.Time&&(u="min"),new r(((e,r)=>{const a={locations:[{lat:n,lon:t}],costing:s,contours:c},l=`${this.url}/isochrone?json=${JSON.stringify(a)}`;o.default.get(l).then((r=>{r.data.features.forEach((t=>{var e,n,r,o;const i=`isochrone-${t.properties.contour}`;t.geometry.type="Polygon",t.geometry.coordinates=[t.geometry.coordinates],null===(e=this.map)||void 0===e||e.addSource(i,{type:"geojson",data:t}),this.contourSources.push(i),null===(n=this.map)||void 0===n||n.addLayer({id:`pg-${i}`,type:"fill",source:i,layout:{},paint:{"fill-color":t.properties.fillColor,"fill-opacity":.1}}),this.contourLayers.push(`pg-${i}`),null===(r=this.map)||void 0===r||r.addLayer({id:`ls-${i}`,type:"line",source:i,layout:{"line-join":"round","line-cap":"round"},paint:{"line-color":t.properties.fillColor,"line-width":3}}),this.contourLayers.push(`ls-${i}`),null===(o=this.map)||void 0===o||o.addLayer({id:`symbol-${i}`,type:"symbol",source:i,layout:{"symbol-placement":"line","text-pitch-alignment":"viewport","text-font":["Roboto Bold"],"text-field":["concat",["get","contour"],` ${u}`],"text-size":16},paint:{"text-color":"#000000","text-halo-width":1,"text-halo-color":"#FFFFFF"}}),this.contourLayers.push(`symbol-${i}`)})),this.map&&(this.contourMaker=(new i.Marker).setLngLat([t,n]).addTo(this.map)),e()})).catch((t=>r(t)))}))}}},507:t=>{"use strict";t.exports=mapboxgl}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(507),e=n.n(t),r=n(620);n(735),(()=>{const t=new(e().Map)({container:"map",style:"https://wasac.github.io/mapbox-stylefiles/unvt/style.json",center:[30.059683,-1.946186],zoom:15,hash:!0});t.addControl(new(e().NavigationControl),"top-right"),t.addControl(new r.n("https://valhalla.water-gis.com",{Contours:[{time:3,color:"ff0000"},{time:5,color:"ffff00"},{time:10,color:"0000ff"}],Crosshair:!0}),"top-right")})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,