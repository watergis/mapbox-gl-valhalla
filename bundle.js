/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={669:(t,e,n)=>{t.exports=n(609)},448:(t,e,n)=>{"use strict";var o=n(702),r=n(867),i=n(26),s=n(372),a=n(327),c=n(97),l=n(109),u=n(985),h=n(61);t.exports=function(t){return new o((function(e,n){var o=t.data,d=t.headers;r.isFormData(o)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(t.auth){var f=t.auth.username||"",m=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";d.Authorization="Basic "+btoa(f+":"+m)}var v=c(t.baseURL,t.url);if(p.open(t.method.toUpperCase(),a(v,t.params,t.paramsSerializer),!0),p.timeout=t.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var o="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:o,config:t,request:p};i(e,n,r),p=null}},p.onabort=function(){p&&(n(h("Request aborted",t,"ECONNABORTED",p)),p=null)},p.onerror=function(){n(h("Network Error",t,null,p)),p=null},p.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),n(h(e,t,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var g=(t.withCredentials||u(v))&&t.xsrfCookieName?s.read(t.xsrfCookieName):void 0;g&&(d[t.xsrfHeaderName]=g)}if("setRequestHeader"in p&&r.forEach(d,(function(t,e){void 0===o&&"content-type"===e.toLowerCase()?delete d[e]:p.setRequestHeader(e,t)})),r.isUndefined(t.withCredentials)||(p.withCredentials=!!t.withCredentials),t.responseType)try{p.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&p.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){p&&(p.abort(),n(t),p=null)})),o||(o=null),p.send(o)}))}},609:(t,e,n)=>{"use strict";var o=n(702),r=n(867),i=n(849),s=n(321),a=n(185);function c(t){var e=new s(t),n=i(s.prototype.request,e);return r.extend(n,s.prototype,e),r.extend(n,e),n}var l=c(n(655));l.Axios=s,l.create=function(t){return c(a(l.defaults,t))},l.Cancel=n(263),l.CancelToken=n(972),l.isCancel=n(502),l.all=function(t){return o.all(t)},l.spread=n(713),l.isAxiosError=n(268),t.exports=l,t.exports.default=l},263:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},972:(t,e,n)=>{"use strict";var o=n(702),r=n(263);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new o((function(t){e=t}));var n=this;t((function(t){n.reason||(n.reason=new r(t),e(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i((function(e){t=e})),cancel:t}},t.exports=i},502:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},321:(t,e,n)=>{"use strict";var o=n(702),r=n(867),i=n(327),s=n(782),a=n(572),c=n(185);function l(t){this.defaults=t,this.interceptors={request:new s,response:new s}}l.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=c(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[a,void 0],n=o.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)n=n.then(e.shift(),e.shift());return n},l.prototype.getUri=function(t){return t=c(this.defaults,t),i(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(t){l.prototype[t]=function(e,n){return this.request(c(n||{},{method:t,url:e,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(t){l.prototype[t]=function(e,n,o){return this.request(c(o||{},{method:t,url:e,data:n}))}})),t.exports=l},782:(t,e,n)=>{"use strict";var o=n(867);function r(){this.handlers=[]}r.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},r.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},r.prototype.forEach=function(t){o.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=r},97:(t,e,n)=>{"use strict";var o=n(793),r=n(303);t.exports=function(t,e){return t&&!o(e)?r(t,e):e}},61:(t,e,n)=>{"use strict";var o=n(481);t.exports=function(t,e,n,r,i){var s=new Error(t);return o(s,e,n,r,i)}},572:(t,e,n)=>{"use strict";var o=n(702),r=n(867),i=n(527),s=n(502),a=n(655);function c(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return c(t),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||a.adapter)(t).then((function(e){return c(t),e.data=i(e.data,e.headers,t.transformResponse),e}),(function(e){return s(e)||(c(t),e&&e.response&&(e.response.data=i(e.response.data,e.response.headers,t.transformResponse))),o.reject(e)}))}},481:t=>{"use strict";t.exports=function(t,e,n,o,r){return t.config=e,n&&(t.code=n),t.request=o,t.response=r,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},185:(t,e,n)=>{"use strict";var o=n(867);t.exports=function(t,e){e=e||{};var n={},r=["url","method","data"],i=["headers","auth","proxy","params"],s=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function c(t,e){return o.isPlainObject(t)&&o.isPlainObject(e)?o.merge(t,e):o.isPlainObject(e)?o.merge({},e):o.isArray(e)?e.slice():e}function l(r){o.isUndefined(e[r])?o.isUndefined(t[r])||(n[r]=c(void 0,t[r])):n[r]=c(t[r],e[r])}o.forEach(r,(function(t){o.isUndefined(e[t])||(n[t]=c(void 0,e[t]))})),o.forEach(i,l),o.forEach(s,(function(r){o.isUndefined(e[r])?o.isUndefined(t[r])||(n[r]=c(void 0,t[r])):n[r]=c(void 0,e[r])})),o.forEach(a,(function(o){o in e?n[o]=c(t[o],e[o]):o in t&&(n[o]=c(void 0,t[o]))}));var u=r.concat(i).concat(s).concat(a),h=Object.keys(t).concat(Object.keys(e)).filter((function(t){return-1===u.indexOf(t)}));return o.forEach(h,l),n}},26:(t,e,n)=>{"use strict";var o=n(61);t.exports=function(t,e,n){var r=n.config.validateStatus;n.status&&r&&!r(n.status)?e(o("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},527:(t,e,n)=>{"use strict";var o=n(867);t.exports=function(t,e,n){return o.forEach(n,(function(n){t=n(t,e)})),t}},655:(t,e,n)=>{"use strict";var o=n(867),r=n(16),i={"Content-Type":"application/x-www-form-urlencoded"};function s(t,e){!o.isUndefined(t)&&o.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a,c={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(a=n(448)),a),transformRequest:[function(t,e){return r(e,"Accept"),r(e,"Content-Type"),o.isFormData(t)||o.isArrayBuffer(t)||o.isBuffer(t)||o.isStream(t)||o.isFile(t)||o.isBlob(t)?t:o.isArrayBufferView(t)?t.buffer:o.isURLSearchParams(t)?(s(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):o.isObject(t)?(s(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};o.forEach(["delete","get","head"],(function(t){c.headers[t]={}})),o.forEach(["post","put","patch"],(function(t){c.headers[t]=o.merge(i)})),t.exports=c},849:t=>{"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),o=0;o<n.length;o++)n[o]=arguments[o];return t.apply(e,n)}}},327:(t,e,n)=>{"use strict";var o=n(867);function r(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var i;if(n)i=n(e);else if(o.isURLSearchParams(e))i=e.toString();else{var s=[];o.forEach(e,(function(t,e){null!=t&&(o.isArray(t)?e+="[]":t=[t],o.forEach(t,(function(t){o.isDate(t)?t=t.toISOString():o.isObject(t)&&(t=JSON.stringify(t)),s.push(r(e)+"="+r(t))})))})),i=s.join("&")}if(i){var a=t.indexOf("#");-1!==a&&(t=t.slice(0,a)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}},303:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},372:(t,e,n)=>{"use strict";var o=n(867);t.exports=o.isStandardBrowserEnv()?{write:function(t,e,n,r,i,s){var a=[];a.push(t+"="+encodeURIComponent(e)),o.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),o.isString(r)&&a.push("path="+r),o.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},268:t=>{"use strict";t.exports=function(t){return"object"==typeof t&&!0===t.isAxiosError}},985:(t,e,n)=>{"use strict";var o=n(867);t.exports=o.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function r(t){var o=t;return e&&(n.setAttribute("href",o),o=n.href),n.setAttribute("href",o),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=r(window.location.href),function(e){var n=o.isString(e)?r(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},16:(t,e,n)=>{"use strict";var o=n(867);t.exports=function(t,e){o.forEach(t,(function(n,o){o!==e&&o.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[o])}))}},109:(t,e,n)=>{"use strict";var o=n(867),r=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,i,s={};return t?(o.forEach(t.split("\n"),(function(t){if(i=t.indexOf(":"),e=o.trim(t.substr(0,i)).toLowerCase(),n=o.trim(t.substr(i+1)),e){if(s[e]&&r.indexOf(e)>=0)return;s[e]="set-cookie"===e?(s[e]?s[e]:[]).concat([n]):s[e]?s[e]+", "+n:n}})),s):s}},713:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},867:(t,e,n)=>{"use strict";var o=n(849),r=Object.prototype.toString;function i(t){return"[object Array]"===r.call(t)}function s(t){return void 0===t}function a(t){return null!==t&&"object"==typeof t}function c(t){if("[object Object]"!==r.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function l(t){return"[object Function]"===r.call(t)}function u(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),i(t))for(var n=0,o=t.length;n<o;n++)e.call(null,t[n],n,t);else for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.call(null,t[r],r,t)}t.exports={isArray:i,isArrayBuffer:function(t){return"[object ArrayBuffer]"===r.call(t)},isBuffer:function(t){return null!==t&&!s(t)&&null!==t.constructor&&!s(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:a,isPlainObject:c,isUndefined:s,isDate:function(t){return"[object Date]"===r.call(t)},isFile:function(t){return"[object File]"===r.call(t)},isBlob:function(t){return"[object Blob]"===r.call(t)},isFunction:l,isStream:function(t){return a(t)&&l(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function t(){var e={};function n(n,o){c(e[o])&&c(n)?e[o]=t(e[o],n):c(n)?e[o]=t({},n):i(n)?e[o]=n.slice():e[o]=n}for(var o=0,r=arguments.length;o<r;o++)u(arguments[o],n);return e},extend:function(t,e,n){return u(e,(function(e,r){t[r]=n&&"function"==typeof e?o(e,n):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},170:(t,e,n)=>{(e=n(645)(!1)).push([t.id,'.mapboxgl-valhalla-list\n{\n    display: none;\n}\n\n.mapboxgl-ctrl-group .mapboxgl-valhalla-list button\n{\n    background: none;\n    border: none;\n    cursor: pointer;\n    display: block;\n    font-size: 14px;\n    padding: 8px 8px 6px;\n    text-align: right;\n    width: 100%;\n    height: auto;\n}\n\n.mapboxgl-valhalla-list button.active\n{\n    font-weight: bold;\n}\n\n.mapboxgl-valhalla-list button:hover\n{\n    background-color: rgba(0, 0, 0, 0.05);\n}\n\n.mapboxgl-valhalla-list button + button\n{\n    border-top: 1px solid #ddd;\n}\n\n.mapboxgl-valhalla-time-isochrone-control\n{ \n    background: url(\'data:image/svg+xml;charset=UTF-8,<svg id="Capa_1" enable-background="new 0 0 443.294 443.294" height="512" viewBox="0 0 443.294 443.294" width="512" xmlns="http://www.w3.org/2000/svg"><path d="m221.647 0c-122.214 0-221.647 99.433-221.647 221.647s99.433 221.647 221.647 221.647 221.647-99.433 221.647-221.647-99.433-221.647-221.647-221.647zm0 415.588c-106.941 0-193.941-87-193.941-193.941s87-193.941 193.941-193.941 193.941 87 193.941 193.941-87 193.941-193.941 193.941z"/><path d="m235.5 83.118h-27.706v144.265l87.176 87.176 19.589-19.589-79.059-79.059z"/></svg>\');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 70%;\n}\n\n.mapboxgl-valhalla-distance-isochrone-control\n{ \n    background: url(\'data:image/svg+xml;charset=UTF-8,<svg id="Capa_1" enable-background="new 0 0 512 512" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg"><g><path d="M487.663,282.767c-32.447-32.447-85.054-32.447-117.501,0c-26.833,26.833-32.076,68.438-12.738,101.089l53.549,90.417 H105.657c-26.329,0-47.749-21.421-47.749-47.75c0-26.329,21.42-47.749,47.749-47.749h143.589 c42.871,0,77.749-34.878,77.749-77.749c0-42.871-34.878-77.749-77.749-77.749H101.027l53.549-90.416 c19.338-32.651,14.095-74.256-12.738-101.089c-32.447-32.447-85.054-32.447-117.501,0C-2.496,58.603-7.739,100.208,11.599,132.859 l71.489,120.708l0.172-0.291h165.986c26.329,0,47.749,21.42,47.749,47.749c0,26.329-21.42,47.749-47.749,47.749H105.657 c-42.871,0-77.749,34.878-77.749,77.749c0,42.871,34.878,77.75,77.749,77.75H428.74l0.172,0.291l71.489-120.707 C519.739,351.205,514.496,309.6,487.663,282.767z M83.087,116.713c-14.442,0-26.191-11.749-26.191-26.191 c0-14.442,11.749-26.191,26.191-26.191c14.442,0,26.191,11.749,26.191,26.191C109.278,104.964,97.529,116.713,83.087,116.713z M427.79,367.71c-14.442,0-26.191-11.749-26.191-26.191c0-14.442,11.749-26.191,26.191-26.191 c14.442,0,26.191,11.749,26.191,26.191S442.232,367.71,427.79,367.71z"/></g></svg>\');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 70%;\n}\n\n.mapbox-valhalla-control-button\n{\n    background: none;\n    border: none;\n    cursor: pointer;\n    display: inline!important;\n    font-size: 14px;\n    padding: 8px 8px 6px;\n    text-align: center!important;\n    width: 50%!important;\n    height: auto;\n}',""]),t.exports=e},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n,o,r,i=t[1]||"",s=t[3];if(!s)return i;if(e&&"function"==typeof btoa){var a=(n=s,o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(r," */")),c=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[i].concat(c).concat([a]).join("\n")}return[i].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(r[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);o&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},702:function(t,e,n){t.exports=function(){"use strict";function t(t){return"function"==typeof t}var e=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},o=0,r=void 0,i=void 0,s=function(t,e){p[o]=t,p[o+1]=e,2===(o+=2)&&(i?i(f):y())};var a="undefined"!=typeof window?window:void 0,c=a||{},l=c.MutationObserver||c.WebKitMutationObserver,u="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),h="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function d(){var t=setTimeout;return function(){return t(f,1)}}var p=new Array(1e3);function f(){for(var t=0;t<o;t+=2)(0,p[t])(p[t+1]),p[t]=void 0,p[t+1]=void 0;o=0}var m,v,g,b,y=void 0;function C(t,e){var n=this,o=new this.constructor(E);void 0===o[w]&&R(o);var r=n._state;if(r){var i=arguments[r-1];s((function(){return O(r,o,i,n._result)}))}else j(n,o,t,e);return o}function x(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(E);return _(e,t),e}y=u?function(){return process.nextTick(f)}:l?(v=0,g=new l(f),b=document.createTextNode(""),g.observe(b,{characterData:!0}),function(){b.data=v=++v%2}):h?((m=new MessageChannel).port1.onmessage=f,function(){return m.port2.postMessage(0)}):void 0===a?function(){try{var t=Function("return this")().require("vertx");return void 0!==(r=t.runOnLoop||t.runOnContext)?function(){r(f)}:d()}catch(t){return d()}}():d();var w=Math.random().toString(36).substring(2);function E(){}var L=void 0;function A(e,n,o){n.constructor===e.constructor&&o===C&&n.constructor.resolve===x?function(t,e){1===e._state?S(t,e._result):2===e._state?T(t,e._result):j(e,void 0,(function(e){return _(t,e)}),(function(e){return T(t,e)}))}(e,n):void 0===o?S(e,n):t(o)?function(t,e,n){s((function(t){var o=!1,r=function(t,e,n,o){try{t.call(e,n,o)}catch(t){return t}}(n,e,(function(n){o||(o=!0,e!==n?_(t,n):S(t,n))}),(function(e){o||(o=!0,T(t,e))}),t._label);!o&&r&&(o=!0,T(t,r))}),t)}(e,n,o):S(e,n)}function _(t,e){if(t===e)T(t,new TypeError("You cannot resolve a promise with itself"));else if(r=typeof(o=e),null===o||"object"!==r&&"function"!==r)S(t,e);else{var n=void 0;try{n=e.then}catch(e){return void T(t,e)}A(t,e,n)}var o,r}function k(t){t._onerror&&t._onerror(t._result),B(t)}function S(t,e){t._state===L&&(t._result=e,t._state=1,0!==t._subscribers.length&&s(B,t))}function T(t,e){t._state===L&&(t._state=2,t._result=e,s(k,t))}function j(t,e,n,o){var r=t._subscribers,i=r.length;t._onerror=null,r[i]=e,r[i+1]=n,r[i+2]=o,0===i&&t._state&&s(B,t)}function B(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var o=void 0,r=void 0,i=t._result,s=0;s<e.length;s+=3)o=e[s],r=e[s+n],o?O(n,o,r,i):r(i);t._subscribers.length=0}}function O(e,n,o,r){var i=t(o),s=void 0,a=void 0,c=!0;if(i){try{s=o(r)}catch(t){c=!1,a=t}if(n===s)return void T(n,new TypeError("A promises callback cannot return that same promise."))}else s=r;n._state!==L||(i&&c?_(n,s):!1===c?T(n,a):1===e?S(n,s):2===e&&T(n,s))}var N=0;function R(t){t[w]=N++,t._state=void 0,t._result=void 0,t._subscribers=[]}var D=function(){function t(t,n){this._instanceConstructor=t,this.promise=new t(E),this.promise[w]||R(this.promise),e(n)?(this.length=n.length,this._remaining=n.length,this._result=new Array(this.length),0===this.length?S(this.promise,this._result):(this.length=this.length||0,this._enumerate(n),0===this._remaining&&S(this.promise,this._result))):T(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var e=0;this._state===L&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,o=n.resolve;if(o===x){var r=void 0,i=void 0,s=!1;try{r=t.then}catch(t){s=!0,i=t}if(r===C&&t._state!==L)this._settledAt(t._state,e,t._result);else if("function"!=typeof r)this._remaining--,this._result[e]=t;else if(n===M){var a=new n(E);s?T(a,i):A(a,t,r),this._willSettleAt(a,e)}else this._willSettleAt(new n((function(e){return e(t)})),e)}else this._willSettleAt(o(t),e)},t.prototype._settledAt=function(t,e,n){var o=this.promise;o._state===L&&(this._remaining--,2===t?T(o,n):this._result[e]=n),0===this._remaining&&S(o,this._result)},t.prototype._willSettleAt=function(t,e){var n=this;j(t,void 0,(function(t){return n._settledAt(1,e,t)}),(function(t){return n._settledAt(2,e,t)}))},t}();var M=function(){function e(t){this[w]=N++,this._result=this._state=void 0,this._subscribers=[],E!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof e?function(t,e){try{e((function(e){_(t,e)}),(function(e){T(t,e)}))}catch(e){T(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return e.prototype.catch=function(t){return this.then(null,t)},e.prototype.finally=function(e){var n=this,o=n.constructor;return t(e)?n.then((function(t){return o.resolve(e()).then((function(){return t}))}),(function(t){return o.resolve(e()).then((function(){throw t}))})):n.then(e,e)},e}();return M.prototype.then=C,M.all=function(t){return new D(this,t).promise},M.race=function(t){var n=this;return e(t)?new n((function(e,o){for(var r=t.length,i=0;i<r;i++)n.resolve(t[i]).then(e,o)})):new n((function(t,e){return e(new TypeError("You must pass an array to race."))}))},M.resolve=x,M.reject=function(t){var e=new this(E);return T(e,t),e},M._setScheduler=function(t){i=t},M._setAsap=function(t){s=t},M._asap=s,M.polyfill=function(){var t=void 0;if(void 0!==n.g)t=n.g;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var o=null;try{o=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===o&&!e.cast)return}t.Promise=M},M.Promise=M,M}()},735:(t,e,n)=>{var o=n(994),r=n(170);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[t.id,r,""]]);o(r,{insert:"head",singleton:!1}),t.exports=r.locals||{}},994:(t,e,n)=>{"use strict";var o,r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function s(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},o=[],r=0;r<t.length;r++){var a=t[r],c=e.base?a[0]+e.base:a[0],l=n[c]||0,u="".concat(c," ").concat(l);n[c]=l+1;var h=s(u),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==h?(i[h].references++,i[h].updater(d)):i.push({identifier:u,updater:m(d,e),references:1}),o.push(u)}return o}function c(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var s=r(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var l,u=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function h(t,e,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=u(e,r);else{var i=document.createTextNode(r),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function d(t,e,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var p=null,f=0;function m(t,e){var n,o,r;if(e.singleton){var i=f++;n=p||(p=c(e)),o=h.bind(null,n,i,!1),r=h.bind(null,n,i,!0)}else n=c(e),o=d.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var r=s(n[o]);i[r].references--}for(var c=a(t,e),l=0;l<n.length;l++){var u=s(n[l]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=c}}}},722:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.color="#535353",this.map=t}create(){this.updateValues(),void 0!==this.map?(this.map.on("resize",this.mapResize.bind(this)),this.createCanvas(this.map.getCanvasContainer())):console.error("map object is null")}updateValues(){var t,e;this.width=null===(t=this.map)||void 0===t?void 0:t.getCanvas().clientWidth,this.height=null===(e=this.map)||void 0===e?void 0:e.getCanvas().clientHeight}mapResize(){this.updateValues(),this.updateCanvas()}updateCanvas(){if(void 0!==this.svgCanvas&&void 0!==this.yLine&&void 0!==this.xLine&&void 0!==this.width&&void 0!==this.height){this.svgCanvas.setAttribute("width",`${this.width}px`),this.svgCanvas.setAttribute("height",`${this.height}px`);const t=this.width/2,e=this.height/2;this.yLine.setAttribute("x1",`${t}px`),this.yLine.setAttribute("y1","0px"),this.yLine.setAttribute("x2",`${t}px`),this.yLine.setAttribute("y2",`${this.height}px`),this.xLine.setAttribute("x1","0px"),this.xLine.setAttribute("y1",`${e}px`),this.xLine.setAttribute("x2",`${this.width}px`),this.xLine.setAttribute("y2",`${e}px`)}}createCanvas(t){if(void 0!==this.width&&void 0!==this.height){const e=document.createElementNS("http://www.w3.org/2000/svg","svg");e.style.position="relative",e.setAttribute("width",`${this.width}px`),e.setAttribute("height",`${this.height}px`);const n=this.width/2,o=this.height/2;this.yLine=e.appendChild(this.createLine(n,0,n,this.height,this.color,"2px")),this.xLine=e.appendChild(this.createLine(0,o,this.width,o,this.color,"2px")),null==t||t.appendChild(e),this.svgCanvas=e}}createLine(t,e,n,o,r,i){const s=document.createElementNS("http://www.w3.org/2000/svg","line");return s.setAttribute("x1",t),s.setAttribute("y1",e),s.setAttribute("x2",n),s.setAttribute("y2",o),s.setAttribute("stroke-dasharray","5,5"),s.setAttribute("stroke",r),s.setAttribute("stroke-width",i),s}destroy(){void 0!==this.xLine&&(this.xLine.remove(),this.xLine=void 0),void 0!==this.yLine&&(this.yLine.remove(),this.yLine=void 0),void 0!==this.svgCanvas&&(this.svgCanvas.remove(),this.svgCanvas=void 0),void 0!==this.map&&(this.map.off("resize",this.mapResize),this.map=void 0)}}},833:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const o=n(824),r=n(722),i=n(379);e.default=class{constructor(t,e){this.map=t,this.valhalla=e,this.onDocumentClick=this.onDocumentClick.bind(this)}addTo(t){var e,n;this.map||console.error("map object is null"),this.controlContainer=document.createElement("div"),this.controlContainer.classList.add("mapboxgl-ctrl"),this.controlContainer.classList.add("mapboxgl-ctrl-group"),this.mainContainer=document.createElement("div"),this.mainContainer.classList.add("mapboxgl-valhalla-list"),this.mainButton=document.createElement("button"),this.mainButton.classList.add("mapboxgl-ctrl-icon"),this.mainButton.classList.add("mapboxgl-valhalla-distance-isochrone-control"),this.mainButton.addEventListener("click",(()=>{this.mainButton.style.display="none",this.mainContainer.style.display="block",this.toggleCrosshair(!0)})),document.addEventListener("click",this.onDocumentClick),this.controlContainer.appendChild(this.mainButton),this.controlContainer.appendChild(this.mainContainer);const r=document.createElement("TABLE");r.className="valhalla-table",this.mainContainer.appendChild(r);const s=null===(e=this.map)||void 0===e?void 0:e.getCenter();if(s){const t=i.createTextbox("Longitude","lon-distance",s.lng,!0);r.appendChild(t);const e=i.createTextbox("Latitude","lat-distance",s.lat,!0);r.appendChild(e)}const a=document.createElement("button");a.textContent="Clear",a.classList.add("mapbox-valhalla-control-button"),a.addEventListener("click",(()=>{this.valhalla.clearFeatures()})),this.mainContainer.appendChild(a);const c=document.createElement("button");return c.textContent="Calculate",c.classList.add("mapbox-valhalla-control-button"),c.addEventListener("click",(()=>{const t=document.getElementById("mapbox-gl-valhalla-lon-distance"),e=document.getElementById("mapbox-gl-valhalla-lat-distance");this.valhalla.getIsochrone(Number(t.value),Number(e.value),o.ContourType.Distance,o.Costing.Walking)})),this.mainContainer.appendChild(c),null===(n=this.map)||void 0===n||n.on("moveend",(()=>{var t;const e=null===(t=this.map)||void 0===t?void 0:t.getCenter(),n=document.getElementById("mapbox-gl-valhalla-lon-distance"),o=document.getElementById("mapbox-gl-valhalla-lat-distance");e||(n.setAttribute("value",""),o.setAttribute("value",""));const r=e,i=(null==r?void 0:r.lng)?r.lng.toString():"";n.setAttribute("value",i);const s=(null==r?void 0:r.lat)?r.lat.toString():"";o.setAttribute("value",s)})),t.appendChild(this.controlContainer),t}onDocumentClick(t){this.controlContainer&&!this.controlContainer.contains(t.target)&&this.hide()}hide(){this.mainContainer&&this.mainButton&&(this.mainContainer.style.display="none",this.mainButton.style.display="block",this.toggleCrosshair(!1))}destroy(){this.mainContainer&&this.mainContainer.parentNode&&this.map&&this.mainButton&&(this.mainButton.removeEventListener("click",this.onDocumentClick),this.mainContainer.parentNode.removeChild(this.mainContainer),document.removeEventListener("click",this.onDocumentClick),void 0!==this.crosshair&&(this.crosshair.destroy(),this.crosshair=void 0),this.map=void 0)}toggleCrosshair(t){!1===t?void 0!==this.crosshair&&(this.crosshair.destroy(),this.crosshair=void 0):(this.crosshair=new r.default(this.map),this.crosshair.create())}}},620:(t,e,n)=>{"use strict";e.n=void 0;var o=n(980);Object.defineProperty(e,"n",{enumerable:!0,get:function(){return o.default}})},394:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const o=n(824),r=n(722),i=n(379);e.default=class{constructor(t,e){this.map=t,this.valhalla=e,this.onDocumentClick=this.onDocumentClick.bind(this)}addTo(t){var e,n;this.map||console.error("map object is null"),this.controlContainer=document.createElement("div"),this.controlContainer.classList.add("mapboxgl-ctrl"),this.controlContainer.classList.add("mapboxgl-ctrl-group"),this.mainContainer=document.createElement("div"),this.mainContainer.classList.add("mapboxgl-valhalla-list"),this.mainButton=document.createElement("button"),this.mainButton.classList.add("mapboxgl-ctrl-icon"),this.mainButton.classList.add("mapboxgl-valhalla-time-isochrone-control"),this.mainButton.addEventListener("click",(()=>{this.mainButton.style.display="none",this.mainContainer.style.display="block",this.toggleCrosshair(!0)})),document.addEventListener("click",this.onDocumentClick),this.controlContainer.appendChild(this.mainButton),this.controlContainer.appendChild(this.mainContainer);const r=document.createElement("TABLE");r.className="valhalla-table",this.mainContainer.appendChild(r);const s=i.createSelection(o.Costing,"Means of transport","costing",o.Costing.Walking,((t,e)=>t[e]));r.appendChild(s);const a=null===(e=this.map)||void 0===e?void 0:e.getCenter();if(a){const t=i.createTextbox("Longitude","lon-time",a.lng,!0);r.appendChild(t);const e=i.createTextbox("Latitude","lat-time",a.lat,!0);r.appendChild(e)}const c=document.createElement("button");c.textContent="Clear",c.classList.add("mapbox-valhalla-control-button"),c.addEventListener("click",(()=>{this.valhalla.clearFeatures()})),this.mainContainer.appendChild(c);const l=document.createElement("button");return l.textContent="Calculate",l.classList.add("mapbox-valhalla-control-button"),l.addEventListener("click",(()=>{const t=document.getElementById("mapbox-gl-valhalla-lon-time"),e=document.getElementById("mapbox-gl-valhalla-lat-time"),n=document.getElementById("mapbox-gl-valhalla-costing");this.valhalla.getIsochrone(Number(t.value),Number(e.value),o.ContourType.Time,n.value)})),this.mainContainer.appendChild(l),null===(n=this.map)||void 0===n||n.on("moveend",(()=>{var t;const e=null===(t=this.map)||void 0===t?void 0:t.getCenter(),n=document.getElementById("mapbox-gl-valhalla-lon-time"),o=document.getElementById("mapbox-gl-valhalla-lat-time");e||(n.setAttribute("value",""),o.setAttribute("value",""));const r=e,i=(null==r?void 0:r.lng)?r.lng.toString():"";n.setAttribute("value",i);const s=(null==r?void 0:r.lat)?r.lat.toString():"";o.setAttribute("value",s)})),t.appendChild(this.controlContainer),t}onDocumentClick(t){this.controlContainer&&!this.controlContainer.contains(t.target)&&this.hide()}hide(){this.mainContainer&&this.mainButton&&(this.mainContainer.style.display="none",this.mainButton.style.display="block",this.toggleCrosshair(!1))}destroy(){this.mainContainer&&this.mainContainer.parentNode&&this.map&&this.mainButton&&(this.mainButton.removeEventListener("click",this.onDocumentClick),this.mainContainer.parentNode.removeChild(this.mainContainer),document.removeEventListener("click",this.onDocumentClick),void 0!==this.crosshair&&(this.crosshair.destroy(),this.crosshair=void 0),this.map=void 0)}toggleCrosshair(t){!1===t?void 0!==this.crosshair&&(this.crosshair.destroy(),this.crosshair=void 0):(this.crosshair=new r.default(this.map),this.crosshair.create())}}},379:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createTextbox=e.createSelection=void 0,e.createSelection=(t,e,n,o,r)=>{const i=document.createElement("label");i.textContent=e;const s=document.createElement("select");s.setAttribute("id",`mapbox-gl-valhalla-${n}`),s.style.width="100%",Object.keys(t).forEach((e=>{const i=document.createElement("option");i.setAttribute("value",r(t,e)),i.appendChild(document.createTextNode(e)),i.setAttribute("name",n),o===t[e]&&(i.selected=!0),s.appendChild(i)}));const a=document.createElement("TR"),c=document.createElement("TD"),l=document.createElement("TD");return c.appendChild(i),l.appendChild(s),a.appendChild(c),a.appendChild(l),a},e.createTextbox=(t,e,n,o)=>{const r=document.createElement("label");r.textContent=t;const i=document.createElement("input");i.setAttribute("id",`mapbox-gl-valhalla-${e}`),i.setAttribute("type","text"),i.setAttribute("value",n),i.readOnly=o;const s=document.createElement("TR"),a=document.createElement("TD"),c=document.createElement("TD");return a.appendChild(r),c.appendChild(i),s.appendChild(a),s.appendChild(c),s}},980:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const o=n(394),r=n(833),i=n(824);e.default=class{constructor(t,e){this.options={Contours:[{time:5,distance:1,color:"ff0000"},{time:10,distance:3,color:"ffff00"},{time:15,distance:5,color:"0000ff"}]},this.url=t,e&&(this.options=Object.assign(this.options,e)),this.onDocumentClick=this.onDocumentClick.bind(this)}getDefaultPosition(){return"top-right"}onAdd(t){return this.map=t,this.map&&(this.valhalla=new i.default(this.map,this.url,this.options.Contours)),this.controlContainer=document.createElement("div"),this.timeIsochroneControl=new o.default(this.map,this.valhalla),this.controlContainer=this.timeIsochroneControl.addTo(this.controlContainer),this.distanceIsochroneControl=new r.default(this.map,this.valhalla),this.controlContainer=this.distanceIsochroneControl.addTo(this.controlContainer),document.addEventListener("click",this.onDocumentClick),this.controlContainer}onDocumentClick(t){this.controlContainer&&!this.controlContainer.contains(t.target)&&this.timeIsochroneControl&&this.distanceIsochroneControl&&(this.timeIsochroneControl.hide(),this.distanceIsochroneControl.hide())}onRemove(){this.controlContainer&&this.controlContainer.parentNode&&this.map&&this.timeIsochroneControl&&this.distanceIsochroneControl&&(this.timeIsochroneControl.destroy(),this.distanceIsochroneControl.destroy(),this.controlContainer.parentNode.removeChild(this.controlContainer),document.removeEventListener("click",this.onDocumentClick),this.map=void 0)}}},824:(t,e,n)=>{"use strict";var o=n(702);Object.defineProperty(e,"__esModule",{value:!0}),e.ContourType=e.Costing=void 0;const r=n(669),i=n(507);e.Costing={Walking:"pedestrian",Bicycle:"bicycle",Car:"auto"},e.ContourType={Time:"time",Distance:"distance"},e.default=class{constructor(t,e,n){this.contourSources=[],this.contourLayers=[],this.contourMaker=void 0,this.contours=[{time:5,distance:1,color:"ff0000"},{time:10,distance:3,color:"ffff00"},{time:15,distance:5,color:"0000ff"}],this.map=t,this.url=e,n&&(this.contours=n)}clearFeatures(){this.contourLayers&&this.contourLayers.length>0&&(this.contourLayers.forEach((t=>{var e;null===(e=this.map)||void 0===e||e.removeLayer(t)})),this.contourLayers=[]),this.contourSources&&this.contourSources.length>0&&(this.contourSources.forEach((t=>{var e;null===(e=this.map)||void 0===e||e.removeSource(t)})),this.contourSources=[]),this.contourMaker&&(this.contourMaker.remove(),this.contourMaker=void 0)}getIsochrone(t,n,s,a){this.clearFeatures();const c=JSON.parse(JSON.stringify(this.contours));c.forEach((t=>{s===e.ContourType.Time?delete t.distance:delete t.time}));let l="km";return s===e.ContourType.Time&&(l="min"),new o(((e,o)=>{const s={locations:[{lat:n,lon:t}],costing:a,contours:c,polygons:!0},u=`${this.url}/isochrone?json=${JSON.stringify(s)}`;r.default.get(u).then((o=>{o.data.features.forEach((t=>{var e,n,o,r;const i=`isochrone-${t.properties.contour}`;null===(e=this.map)||void 0===e||e.addSource(i,{type:"geojson",data:t}),this.contourSources.push(i),null===(n=this.map)||void 0===n||n.addLayer({id:`pg-${i}`,type:"fill",source:i,layout:{},paint:{"fill-color":t.properties.fillColor,"fill-opacity":.1}}),this.contourLayers.push(`pg-${i}`),null===(o=this.map)||void 0===o||o.addLayer({id:`ls-${i}`,type:"line",source:i,layout:{"line-join":"round","line-cap":"round"},paint:{"line-color":t.properties.fillColor,"line-width":3}}),this.contourLayers.push(`ls-${i}`),null===(r=this.map)||void 0===r||r.addLayer({id:`symbol-${i}`,type:"symbol",source:i,layout:{"symbol-placement":"line","text-pitch-alignment":"viewport","text-font":["Roboto Bold"],"text-field":["concat",["get","contour"],` ${l}`],"text-size":16},paint:{"text-color":"#000000","text-halo-width":1,"text-halo-color":"#FFFFFF"}}),this.contourLayers.push(`symbol-${i}`)})),this.map&&(this.contourMaker=(new i.Marker).setLngLat([t,n]).addTo(this.map)),e()})).catch((t=>o(t)))}))}}},507:t=>{"use strict";t.exports=mapboxgl}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(507),e=n.n(t),o=n(620);n(735),(()=>{const t=new(e().Map)({container:"map",style:"https://wasac.github.io/mapbox-stylefiles/unvt/style.json",center:[30.059683,-1.946186],zoom:15,hash:!0});t.addControl(new(e().NavigationControl),"top-right"),t.addControl(new o.n("https://valhalla.water-gis.com",{Contours:[{time:3,distance:1,color:"ff0000"},{time:5,distance:2,color:"ffff00"},{time:10,distance:3,color:"0000ff"}],Crosshair:!0}),"top-right")})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,